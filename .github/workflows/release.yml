name: Release to Maven Central

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Create Maven settings.xml
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      https://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>central</id>
              <username>${CENTRAL_USERNAME}</username>
              <password>${CENTRAL_TOKEN}</password>
            </server>
            <server>
              <id>gpg.passphrase</id>
              <passphrase>${GPG_PASSPHRASE}</passphrase>
            </server>
          </servers>
        </settings>
        EOF
      env:
        CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
        CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Verify Maven settings and credentials
      run: |
        echo "Checking if Maven settings.xml exists:"
        ls -la ~/.m2/settings.xml
        echo ""
        echo "Checking Maven settings content (masking sensitive data):"
        cat ~/.m2/settings.xml | sed 's/<username>.*<\/username>/<username>[MASKED]<\/username>/g' | sed 's/<password>.*<\/password>/<password>[MASKED]<\/password>/g'
        echo ""
        echo "Verifying environment variables are set:"
        if [ -z "$CENTRAL_USERNAME" ]; then
          echo "ERROR: CENTRAL_USERNAME is empty or not set"
          exit 1
        else
          echo "CENTRAL_USERNAME is set (length: ${#CENTRAL_USERNAME})"
        fi
        if [ -z "$CENTRAL_TOKEN" ]; then
          echo "ERROR: CENTRAL_TOKEN is empty or not set"
          exit 1
        else
          echo "CENTRAL_TOKEN is set (length: ${#CENTRAL_TOKEN})"
        fi
        echo ""
        echo "Testing Maven can read settings:"
        mvn help:effective-settings | grep -A 10 -B 5 "central" || echo "No central server found in effective settings"
      env:
        CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
        CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        
    - name: Import GPG key
      run: |
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        
    - name: Download Spectral executables
      run: |
        chmod +x copy-spectral-executables.sh
        ./copy-spectral-executables.sh
        
    - name: Configure GPG
      run: |
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo "default-cache-ttl 21600" >> ~/.gnupg/gpg-agent.conf
        echo "max-cache-ttl 21600" >> ~/.gnupg/gpg-agent.conf
        echo RELOADAGENT | gpg-connect-agent
        
        # List imported keys for debugging
        echo "Available GPG keys:"
        gpg --list-secret-keys --keyid-format=long
        
        # Get the key ID for Maven GPG plugin
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format=long | grep -A1 "sec" | grep -E "[A-F0-9]{16}" | head -1 | awk '{print $1}')
        echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
        echo "Using GPG Key ID: $GPG_KEY_ID"
        
    - name: GPG Sanity Check
      run: |
        echo "=== GPG SANITY CHECK ==="
        
        # Check if GPG passphrase is set
        if [ -z "$GPG_PASSPHRASE" ]; then
          echo "‚ùå ERROR: GPG_PASSPHRASE environment variable is not set"
          exit 1
        else
          echo "‚úÖ GPG_PASSPHRASE is set"
        fi
        
        # Check if we have any secret keys
        SECRET_KEY_COUNT=$(gpg --list-secret-keys --with-colons | grep -c "^sec:")
        if [ "$SECRET_KEY_COUNT" -eq 0 ]; then
          echo "‚ùå ERROR: No GPG secret keys found"
          echo "Available keys:"
          gpg --list-keys
          exit 1
        else
          echo "‚úÖ Found $SECRET_KEY_COUNT GPG secret key(s)"
        fi
        
        # Get the first secret key ID
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format=long | grep -A1 "sec" | grep -E "[A-F0-9]{16}" | head -1 | awk '{print $1}')
        if [ -z "$GPG_KEY_ID" ]; then
          echo "‚ùå ERROR: Could not extract GPG key ID"
          exit 1
        else
          echo "‚úÖ GPG Key ID: $GPG_KEY_ID"
        fi
        
        # Create a test file to sign
        echo "test content for gpg signing" > test-file.txt
        
        # Test GPG signing with the passphrase
        echo "üîç Testing GPG signing capability..."
        if echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor test-file.txt; then
          echo "‚úÖ GPG signing test successful"
          ls -la test-file.txt*
        else
          echo "‚ùå ERROR: GPG signing test failed"
          echo "This could indicate:"
          echo "  - Wrong GPG passphrase"
          echo "  - GPG key import failed"
          echo "  - GPG configuration issues"
          exit 1
        fi
        
        # Verify the signature
        echo "üîç Testing GPG signature verification..."
        if gpg --verify test-file.txt.asc test-file.txt; then
          echo "‚úÖ GPG signature verification successful"
        else
          echo "‚ùå ERROR: GPG signature verification failed"
          exit 1
        fi
        
        # Clean up test files
        rm -f test-file.txt test-file.txt.asc
        
        echo "‚úÖ GPG sanity check completed successfully!"
        echo "=== END GPG SANITY CHECK ==="
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Set version from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        mvn versions:set -DnewVersion=${{ github.event.inputs.version }} -B
        mvn versions:commit -B
        
    - name: Set version from tag
      if: github.event_name == 'release'
      run: |
        # Extract version from tag, removing refs/tags/ prefix
        if [[ "$GITHUB_REF" =~ refs/tags/v?(.+) ]]; then
          VERSION="${BASH_REMATCH[1]}"
        else
          VERSION=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
        fi
        echo "Setting version to: $VERSION"
        mvn versions:set -DnewVersion=$VERSION -B
        mvn versions:commit -B
        
    - name: Build and test
      run: mvn clean test -B
      
    - name: Deploy to Maven Central
      run: |
        echo "Final verification before deployment:"
        ls -la ~/.m2/settings.xml
        echo "Environment check:"
        echo "CENTRAL_USERNAME length: ${#CENTRAL_USERNAME}"
        echo "CENTRAL_TOKEN length: ${#CENTRAL_TOKEN}"
        mvn clean deploy -Prelease -B -Dgpg.passphrase="${GPG_PASSPHRASE}"
      env:
        CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
        CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Create GitHub Release Assets
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION=${{ github.event.inputs.version }}
        gh release create v$VERSION \
          --title "Release $VERSION" \
          --notes "Release $VERSION of spectral-maven-plugin" \
          spectral-plugin/target/spectral-maven-plugin-$VERSION.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
