name: Release to Maven Central

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        
    - name: Create Maven settings.xml
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      https://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>ossrh</id>
              <username>\${env.MAVEN_USERNAME}</username>
              <password>\${env.MAVEN_PASSWORD}</password>
            </server>
          </servers>
        </settings>
        EOF
        
    - name: Import GPG key
      run: |
        mkdir -p ~/.gnupg
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Download Spectral executables
      run: |
        chmod +x copy-spectral-executables.sh
        ./copy-spectral-executables.sh
        
    - name: Configure GPG
      run: |
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo RELOADAGENT | gpg-connect-agent
        
    - name: Set version from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        mvn versions:set -DnewVersion=${{ github.event.inputs.version }} -B
        mvn versions:commit -B
        
    - name: Set version from tag
      if: github.event_name == 'release'
      run: |
        # Extract version from tag, removing refs/tags/ prefix
        if [[ "$GITHUB_REF" =~ refs/tags/v?(.+) ]]; then
          VERSION="${BASH_REMATCH[1]}"
        else
          VERSION=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
        fi
        echo "Setting version to: $VERSION"
        mvn versions:set -DnewVersion=$VERSION -B
        mvn versions:commit -B
        
    - name: Build and test
      run: mvn clean test -B
      
    - name: Deploy to Maven Central
      run: mvn clean deploy -Prelease -B -Dgpg.passphrase="${GPG_PASSPHRASE}"
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Create GitHub Release Assets
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION=${{ github.event.inputs.version }}
        gh release create v$VERSION \
          --title "Release $VERSION" \
          --notes "Release $VERSION of spectral-maven-plugin" \
          spectral-plugin/target/spectral-maven-plugin-$VERSION.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
